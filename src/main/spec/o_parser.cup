
package o_project_compiler;

import java_cup.runtime.*;
import o_project_compiler.ast.*;
import org.apache.log4j.*;
import o_project_compiler.loggers.*;

parser code {:
	
	private boolean lexicalErrorDetected;

	private boolean syntaxErrorDetected;
	private boolean fatalSyntaxErrorDetected;

	public boolean lexicalErrorDetected() {
		return lexicalErrorDetected;
	}
	
    public boolean syntaxErrorDetected() {
    	return syntaxErrorDetected;
    }
    
    public boolean fatalSyntaxErrorDetected() {
    	return fatalSyntaxErrorDetected;
    }

	SyntaxErrorLogger syntaxErrorLogger = new SyntaxErrorLogger();
	

	public void syntax_error(Symbol cur_token) {
	    report_error(null, cur_token);
	}
	

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
		syntaxErrorLogger.log(null, cur_token.left, null, SyntaxErrorLogger.SyntaxErrorKind.FATAL_ERROR);
	    report_fatal_error(null, null);
	}
	

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		fatalSyntaxErrorDetected = true;
		done_parsing();
	}


	public void report_error(String message, Object info) {
		syntaxErrorDetected = true;
	}

:}

init with {:
	lexicalErrorDetected = syntaxErrorDetected = false;
:}

scan with {:
	Scanner scanner = getScanner();
	Symbol symbol = scanner.next_token();
	if(symbol.sym == sym.ERROR) {
		lexicalErrorDetected = true;
		return scan();
	} else {
		return symbol; 
	}
:}

/* ************** NON-TERMINAL SYMBOLS *************** */

nonterminal Program;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName;
nonterminal DeclList;
nonterminal MethodDeclList;
nonterminal ProgramEnd;

nonterminal Decl;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Type;
nonterminal ConstList;
nonterminal ErrorProneGlobalVarDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ClassName;
nonterminal ErrorProneSuperclass;
nonterminal FieldDeclList;
nonterminal Methods;
nonterminal Constructor;

nonterminal Const;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Literal;

nonterminal GlobalVarList;
nonterminal ErrorGlobalVarDecl;

nonterminal ErrorProneGlobalVar;

nonterminal ErrorProneFieldDecl;

nonterminal FieldList;
nonterminal ErrorFieldDecl;

nonterminal Field;

nonterminal MethodDecl;

nonterminal ReturnType;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodName;
nonterminal FormPars;
nonterminal LocalVarDeclList;
nonterminal MethodBodyStart;
nonterminal StatementList;
nonterminal MethodEnd;

nonterminal FormParList;

nonterminal ErrorProneFormPar;

nonterminal LocalVarDecl;

nonterminal LocalVarList;

nonterminal LocalVar;

nonterminal Statement;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Expr;
nonterminal ErrorProneExpr;
nonterminal ActParsStart;
nonterminal ActPars;
nonterminal ActParsEnd;
nonterminal ConditionStart;
nonterminal ErrorProneCondition;
nonterminal ConditionEnd;
nonterminal Else;
nonterminal DoWhileStatementStart;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Condition;

nonterminal rs.etf.pp1.symboltable.concepts.Obj DesignatorStart;


nonterminal rs.etf.pp1.symboltable.concepts.Obj Term;


nonterminal rs.etf.pp1.symboltable.concepts.Obj Factor;

nonterminal ExprList;

nonterminal rs.etf.pp1.symboltable.concepts.Obj CondTerm;

nonterminal rs.etf.pp1.symboltable.concepts.Obj CondFactor;



/* *************** TERMINAL SYMBOLS *************** */

terminal    PROGRAM;
terminal    LBRACE;

terminal    String IDENT;


terminal    SEMI;
terminal    CLASS;
terminal    String RBRACE;

terminal    COMMA;

terminal    ASSIGN;

terminal    Integer   INT;
terminal    Boolean   BOOL;
terminal    Character CHAR;

terminal    LBRACKET;
terminal    RBRACKET;

terminal    EXTENDS;

terminal    LPAREN;
terminal    String RPAREN;
terminal    VOID;

terminal    IF;
terminal    WHILE;
terminal    String BREAK;
terminal    String CONTINUE;
terminal    String RETURN;
terminal    READ;
terminal    PRINT;

terminal    DOT;


terminal    NEW;



terminal    OR;

terminal    AND;


terminal    ELSE;

terminal    DO;

terminal    ERROR;

terminal    THIS;

/* *************** PRECEDENCES *************** */

precedence left ELSE;

/* *************** PRODUCTIONS *************** */



Program               ::= (Program) PROGRAM ProgramName DeclList LBRACE MethodDeclList ProgramEnd;

ProgramName           ::= (ProgramName) IDENT:ident;


DeclList              ::= (NonEmptyDeclList) DeclList Decl
                       |  (EmptyDeclList) /* epsilon */;


Decl                  ::=   (GlobalVarDecl) ErrorProneGlobalVarDecl
                       |  (ClassDecl) CLASS ClassName ErrorProneSuperclass LBRACE FieldDeclList Methods RBRACE;

Type                  ::= (Type) IDENT:ident;

ConstList             ::= (MultipleConstConstList) ConstList COMMA Const
                       |  (SingleConstConstList) Const;

Const                 ::= (Const) IDENT:ident ASSIGN Literal;

Literal               ::= (IntLiteral) INT:value
                       |  (BoolLiteral) BOOL:value
                       |  (CharLiteral) CHAR:value;

ErrorProneGlobalVarDecl ::= (VarDecl) Type GlobalVarList SEMI
                         |  (ErrorGlobalVarDecll) ErrorGlobalVarDecl SEMI;

ErrorGlobalVarDecl    ::= (ErrorGlobalVarDecl) error
                          {:
                             Symbol symbol = (Symbol)(CUP$Parser$stack.elementAt(CUP$Parser$top));
                             parser.syntaxErrorLogger.log(null, symbol.left, null, SyntaxErrorLogger.SyntaxErrorKind.INVALID_DECLARATION);
                             parser.report_error(null, null);
                          :};

GlobalVarList         ::= (MultipleVarGlobalVarList) ErrorProneGlobalVar COMMA GlobalVarList
                       |  (SingleVarGlobalVarList) ErrorProneGlobalVar;

ErrorProneGlobalVar   ::= (VectorGlobalVar) IDENT:ident LBRACKET RBRACKET
                       |  (ScalarGlobalVar) IDENT:ident
                       |  (ErrorGlobalVar) error
                          {:
                             Symbol symbol = (Symbol)(CUP$Parser$stack.elementAt(CUP$Parser$top));
                             parser.syntaxErrorLogger.log(null, symbol.left, null, SyntaxErrorLogger.SyntaxErrorKind.INVALID_GLOBAL_VARIABLE_DECLARATION);
                             parser.report_error(null, null);
                          :};

ClassName             ::= (ClassName) IDENT:ident;

ErrorProneSuperclass  ::= (NonVoidSuperclass) EXTENDS Type
                       |  (VoidSuperclass) /* epsilon */
                       |  (ErrorSuperclass) EXTENDS error
                          {:
                             Symbol symbol = (Symbol)(CUP$Parser$stack.elementAt(CUP$Parser$top));
                             parser.syntaxErrorLogger.log(null, symbol.left, null, SyntaxErrorLogger.SyntaxErrorKind.INVALID_CLASS_INHERITANCE);
                             parser.report_error(null, null);
                          :};

FieldDeclList         ::= (NonEmptyFieldDeclList) FieldDeclList ErrorProneFieldDecl
                       |  (EmptyFieldDeclList) /* epsilon */;

ErrorProneFieldDecl   ::= (CorrectFieldDecl) Type FieldList SEMI
                       |  (ErrorFieldDecl1) ErrorFieldDecl SEMI
                       |  (ErrorFieldDecl2) error
                          {:
                             Symbol symbol = (Symbol)(CUP$Parser$stack.elementAt(CUP$Parser$top));
                             parser.syntaxErrorLogger.log(null, symbol.left, null, SyntaxErrorLogger.SyntaxErrorKind.INVALID_CLASS_FIELD_DECLARATION);
                             parser.report_error(null, null);
                          :};

ErrorFieldDecl        ::= (ErrorFieldDecl) error
                          {:
                             Symbol symbol = (Symbol)(CUP$Parser$stack.elementAt(CUP$Parser$top));
                             parser.syntaxErrorLogger.log(null, symbol.left, null, SyntaxErrorLogger.SyntaxErrorKind.INVALID_CLASS_FIELD_DECLARATION);
                             parser.report_error(null, null);
                          :};

FieldList             ::= (MultipleFieldFieldList) Field COMMA FieldList
                       |  (SingleFieldFieldList) Field;

Field                 ::= (VectorField) IDENT:ident LBRACKET RBRACKET
                       |  (ScalarField) IDENT:ident;

Methods               ::= (NonVoidMethods) LBRACE MethodDeclList RBRACE
                       |  (VoidMethods) /* epsilon */;

MethodDeclList        ::= (NonEmptyMethodDeclList) MethodDeclList MethodDecl
                       |  (EmptyMethodDeclList) /* epsilon */;
                
MethodDecl            ::= (MethodDecl) ReturnType MethodName LPAREN FormPars RPAREN LocalVarDeclList MethodBodyStart StatementList MethodEnd;

ReturnType            ::= (NonVoidReturnType) Type
                       |  (VoidReturnType) VOID;

MethodName            ::= (MethodName) IDENT:ident;

FormPars              ::= (NonVoidFormPars) FormParList
                       |  (VoidFormPars) /* epsilon */;

FormParList           ::= (MultipleFormParFormParList) ErrorProneFormPar COMMA FormParList
                       |  (SingleFormParFormParList) ErrorProneFormPar;
                          
                
ErrorProneFormPar     ::= (VectorFormPar) Type IDENT:ident LBRACKET RBRACKET
                       |  (ScalarFormPar) Type IDENT:ident
                       |  (ErrorFormPar) error
                          {:
                             Symbol symbol = (Symbol)(CUP$Parser$stack.elementAt(CUP$Parser$top));
                             parser.syntaxErrorLogger.log(null, symbol.left, null, SyntaxErrorLogger.SyntaxErrorKind.INVALID_FORMAL_PARAMETER);
                             parser.report_error(null, null);
                          :};
                       
LocalVarDeclList      ::= (NonEmptyLocalVarDeclList) LocalVarDeclList LocalVarDecl
                       |  (EmptyLocalVarDeclList) /* epsilon */;

LocalVarDecl          ::= (LocalVarDecl) Type LocalVarList SEMI;

LocalVarList          ::= (MultipleVarLocalVarList) LocalVarList COMMA LocalVar
                       |  (SingleVarLocalVarList) LocalVar;

LocalVar              ::= (VectorLocalVar) IDENT:ident LBRACKET RBRACKET
                       |  (ScalarLocalVar) IDENT:ident;

MethodBodyStart       ::= (MethodBodyStart) LBRACE;

StatementList         ::= (NonEmptyStatementList) StatementList Statement
                       |  (EmptyStatementList) /* epsilon */;

Statement             ::= (AssignmentDesignatorStatement) Designator ASSIGN ErrorProneExpr SEMI
                       |  (MethodCallDesignatorStatement) Designator ActParsStart ActPars ActParsEnd SEMI
                       |  (IfThenStatement) IF ConditionStart LPAREN ErrorProneCondition RPAREN ConditionEnd Statement
                       |  (IfThenElseStatement) IF ConditionStart LPAREN ErrorProneCondition RPAREN ConditionEnd Statement Else Statement
                       |  (DoWhileStatement) DoWhileStatementStart Statement WHILE ConditionStart LPAREN Condition RPAREN ConditionEnd SEMI
                       |  (BreakStatement) BREAK:dummy SEMI
                       |  (ContinueStatement) CONTINUE:dummy SEMI
                       |  (ReturnNothingStatement) RETURN:dummy SEMI
                       |  (ReturnExprStatement) RETURN:dummy Expr SEMI
                       |  (ReadStatement) READ LPAREN Designator RPAREN SEMI
                       |  (PrintExprStatement) PRINT LPAREN Expr RPAREN SEMI
                       |  (PrintExprIntConstStatement) PRINT LPAREN Expr COMMA INT:intValue RPAREN SEMI
                       |  (DelimitedStatement) LBRACE StatementList RBRACE;                  
                       
Designator            ::= (IdentDesignator) IDENT:ident

                       |  (MemberAccessDesignator) DesignatorStart DOT IDENT:ident;
                             
DesignatorStart       ::= (IdentDesignatorStart) IDENT:ident

                       |  (MemberAccessDesignatorStart) DesignatorStart DOT IDENT:ident;



Expr                  ::= (TermExpr) Term;


Term                  ::= (FactorTerm) Factor;

               
Factor                ::= (DesignatorFactor) Designator
                       |  (MethodCallFactor) Designator ActParsStart ActPars ActParsEnd
                       |  (IntFactor) INT:value
                       |  (CharFactor) CHAR:value
                       |  (BoolFactor) BOOL:value
                       |  (NewScalarFactor) NEW Type
                       |  (NewVectorFactor) NEW Type LBRACKET Expr RBRACKET
                       |  (DelimitedFactor) LPAREN Expr RPAREN;

ActParsStart          ::= (ActParsStart) LPAREN;

ActPars               ::= (NonVoidActPars) ExprList
                       |  (VoidActPars) /* epsilon */;

ExprList              ::= (MultipleExprExprList) Expr COMMA ExprList
                       |  (SingleExprExprList) Expr;

ActParsEnd            ::= (ActParsEnd) RPAREN:dummy;



ErrorProneExpr        ::= (CorrectExpr) Expr
                       |  (ErrorExpr) error
                          {:
                             Symbol symbol = (Symbol)(CUP$Parser$stack.elementAt(CUP$Parser$top));
                             parser.syntaxErrorLogger.log(null, symbol.left, null, SyntaxErrorLogger.SyntaxErrorKind.INVALID_ASSIGNMENT);
                             parser.report_error(null, null);
                          :};

ConditionStart        ::= (ConditionStart) /* epsilon */;

Condition             ::=  (BoolCond) BOOL:value;
                          
ErrorProneCondition   ::= (CorrectCondition) Condition
                       |  (ErrorCondition) error
                          {:
                             Symbol symbol = (Symbol)(CUP$Parser$stack.elementAt(CUP$Parser$top));
                             parser.syntaxErrorLogger.log(null, symbol.left, null, SyntaxErrorLogger.SyntaxErrorKind.INVALID_IF_STATEMENT_CONDITION);
                             parser.report_error(null, null);
                          :};

CondFactor            ::= (ExprCondFactor) Expr;

ConditionEnd          ::= (ConditionEnd) /* epsilon */;

Else                  ::= (Else) ELSE;
                     
DoWhileStatementStart ::= (DoWhileStatementStart) DO;

MethodEnd             ::= (MethodEnd) RBRACE;

Constructor           ::= (Constructor) THIS FormPars LBRACE StatementList RBRACE;

ProgramEnd            ::= (ProgramEnd) RBRACE:dummy;