
package o_project_compiler;

import java_cup.runtime.*;
import o_project_compiler.ast.*;
import org.apache.log4j.*;
import o_project_compiler.loggers.*;

parser code {:
	
	private boolean lexicalErrorDetected;

	private boolean syntaxErrorDetected;
	private boolean fatalSyntaxErrorDetected;

	public boolean lexicalErrorDetected() {
		return lexicalErrorDetected;
	}
	
    public boolean syntaxErrorDetected() {
    	return syntaxErrorDetected;
    }
    
    public boolean fatalSyntaxErrorDetected() {
    	return fatalSyntaxErrorDetected;
    }

	SyntaxErrorLogger syntaxErrorLogger = new SyntaxErrorLogger();
	

	public void syntax_error(Symbol cur_token) {
	    report_error(null, cur_token);
	}
	

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
		syntaxErrorLogger.log(null, cur_token.left, null, SyntaxErrorLogger.SyntaxErrorKind.FATAL_ERROR);
	    report_fatal_error(null, null);
	}
	

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		fatalSyntaxErrorDetected = true;
		done_parsing();
	}


	public void report_error(String message, Object info) {
		syntaxErrorDetected = true;
	}

:}

init with {:
	lexicalErrorDetected = syntaxErrorDetected = false;
:}

scan with {:
	Scanner scanner = getScanner();
	Symbol symbol = scanner.next_token();
	if(symbol.sym == sym.ERROR) {
		lexicalErrorDetected = true;
		return scan();
	} else {
		return symbol; 
	}
:}

/* ************** NON-TERMINAL SYMBOLS *************** */

nonterminal Program Program;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName;
nonterminal DeclList DeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal ProgramEnd ProgramEnd;

nonterminal Decl Decl;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Type;
nonterminal ConstList ConstList;
nonterminal ErrorProneGlobalVarDecl ErrorProneGlobalVarDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ClassName;
nonterminal ErrorProneSuperclass ErrorProneSuperclass;
nonterminal FieldDeclList FieldDeclList;
nonterminal Methods Methods;
nonterminal Constructor Constructor;

nonterminal Const Const;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Literal;

nonterminal GlobalVarList GlobalVarList;
nonterminal ErrorGlobalVarDecl ErrorGlobalVarDecl;

nonterminal ErrorProneGlobalVar ErrorProneGlobalVar;

nonterminal ErrorProneFieldDecl ErrorProneFieldDecl;

nonterminal FieldList FieldList;
nonterminal ErrorFieldDecl ErrorFieldDecl;

nonterminal Field Field;

nonterminal MethodDecl MethodDecl;

nonterminal ReturnType ReturnType;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodName;
nonterminal FormPars FormPars;
nonterminal LocalVarDeclList LocalVarDeclList;
nonterminal MethodBodyStart MethodBodyStart;
nonterminal StatementList StatementList;
nonterminal MethodEnd MethodEnd;

nonterminal FormParList FormParList;

nonterminal ErrorProneFormPar ErrorProneFormPar;

nonterminal LocalVarDecl LocalVarDecl;

nonterminal LocalVarList LocalVarList;

nonterminal LocalVar LocalVar;

nonterminal Statement Statement;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Expr;
nonterminal ErrorProneExpr ErrorProneExpr;
nonterminal ActParsStart ActParsStart;
nonterminal ActPars ActPars;
nonterminal ActParsEnd ActParsEnd;
nonterminal ConditionStart ConditionStart;
nonterminal ErrorProneCondition ErrorProneCondition;
nonterminal ConditionEnd ConditionEnd;
nonterminal Else Else;
nonterminal DoWhileStatementStart DoWhileStatementStart;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Condition;

nonterminal rs.etf.pp1.symboltable.concepts.Obj DesignatorStart;


nonterminal rs.etf.pp1.symboltable.concepts.Obj Term;


nonterminal rs.etf.pp1.symboltable.concepts.Obj Factor;

nonterminal ExprList ExprList;

nonterminal rs.etf.pp1.symboltable.concepts.Obj CondTerm;

nonterminal rs.etf.pp1.symboltable.concepts.Obj CondFactor;



/* *************** TERMINAL SYMBOLS *************** */

terminal    PROGRAM;
terminal    LBRACE;

terminal    String IDENT;


terminal    SEMI;
terminal    CLASS;
terminal    String RBRACE;

terminal    COMMA;

terminal    ASSIGN;

terminal    Integer   INT;
terminal    Boolean   BOOL;
terminal    Character CHAR;

terminal    LBRACKET;
terminal    RBRACKET;

terminal    EXTENDS;

terminal    LPAREN;
terminal    String RPAREN;
terminal    VOID;

terminal    IF;
terminal    WHILE;
terminal    String BREAK;
terminal    String CONTINUE;
terminal    String RETURN;
terminal    READ;
terminal    PRINT;

terminal    DOT;


terminal    NEW;



terminal    OR;

terminal    AND;


terminal    ELSE;

terminal    DO;

terminal    ERROR;

terminal    THIS;

/* *************** PRECEDENCES *************** */

precedence left ELSE;

/* *************** PRODUCTIONS *************** */



Program               ::= (Program) PROGRAM ProgramName:P1 DeclList:D2 LBRACE MethodDeclList:M3 ProgramEnd:P4 {: RESULT=new Program(P1, D2, M3, P4); RESULT.setLine(P1left); :};

ProgramName           ::= (ProgramName) IDENT:ident {: RESULT=new ProgramName(ident); RESULT.setLine(identleft); :};


DeclList              ::= (NonEmptyDeclList) DeclList:D1 Decl:D2 {: RESULT=new NonEmptyDeclList(D1, D2); RESULT.setLine(D1left); :}
                       |  (EmptyDeclList) {: RESULT=new EmptyDeclList(); :} /* epsilon */;


Decl                  ::=   (GlobalVarDecl) ErrorProneGlobalVarDecl:E1 {: RESULT=new GlobalVarDecl(E1); RESULT.setLine(E1left); :}
                       |  (ClassDecl) CLASS ClassName:C1 ErrorProneSuperclass:E2 LBRACE FieldDeclList:F3 Methods:M4 RBRACE:R5 {: RESULT=new ClassDecl(C1, E2, F3, M4, R5); RESULT.setLine(C1left); :};

Type                  ::= (Type) IDENT:ident {: RESULT=new Type(ident); RESULT.setLine(identleft); :};

ConstList             ::= (MultipleConstConstList) ConstList:C1 COMMA Const:C2 {: RESULT=new MultipleConstConstList(C1, C2); RESULT.setLine(C1left); :}
                       |  (SingleConstConstList) Const:C1 {: RESULT=new SingleConstConstList(C1); RESULT.setLine(C1left); :};

Const                 ::= (Const) IDENT:ident ASSIGN Literal:L1 {: RESULT=new Const(ident, L1); RESULT.setLine(identleft); :};

Literal               ::= (IntLiteral) INT:value {: RESULT=new IntLiteral(value); RESULT.setLine(valueleft); :}
                       |  (BoolLiteral) BOOL:value {: RESULT=new BoolLiteral(value); RESULT.setLine(valueleft); :}
                       |  (CharLiteral) CHAR:value {: RESULT=new CharLiteral(value); RESULT.setLine(valueleft); :};

ErrorProneGlobalVarDecl ::= (VarDecl) Type:T1 GlobalVarList:G2 SEMI {: RESULT=new VarDecl(T1, G2); RESULT.setLine(T1left); :}
                         |  (ErrorGlobalVarDecll) ErrorGlobalVarDecl:E1 SEMI {: RESULT=new ErrorGlobalVarDecll(E1); RESULT.setLine(E1left); :};

ErrorGlobalVarDecl    ::= (ErrorGlobalVarDecl) error
                          {:
                             Symbol symbol = (Symbol)(CUP$Parser$stack.elementAt(CUP$Parser$top));
                             parser.syntaxErrorLogger.log(null, symbol.left, null, SyntaxErrorLogger.SyntaxErrorKind.INVALID_DECLARATION);
                             parser.report_error(null, null);
                          :} {: RESULT=new ErrorGlobalVarDecl(); :};

GlobalVarList         ::= (MultipleVarGlobalVarList) ErrorProneGlobalVar:E1 COMMA GlobalVarList:G2 {: RESULT=new MultipleVarGlobalVarList(E1, G2); RESULT.setLine(E1left); :}
                       |  (SingleVarGlobalVarList) ErrorProneGlobalVar:E1 {: RESULT=new SingleVarGlobalVarList(E1); RESULT.setLine(E1left); :};

ErrorProneGlobalVar   ::= (VectorGlobalVar) IDENT:ident LBRACKET RBRACKET {: RESULT=new VectorGlobalVar(ident); RESULT.setLine(identleft); :}
                       |  (ScalarGlobalVar) IDENT:ident {: RESULT=new ScalarGlobalVar(ident); RESULT.setLine(identleft); :}
                       |  (ErrorGlobalVar) error
                          {:
                             Symbol symbol = (Symbol)(CUP$Parser$stack.elementAt(CUP$Parser$top));
                             parser.syntaxErrorLogger.log(null, symbol.left, null, SyntaxErrorLogger.SyntaxErrorKind.INVALID_GLOBAL_VARIABLE_DECLARATION);
                             parser.report_error(null, null);
                          :} {: RESULT=new ErrorGlobalVar(); :};

ClassName             ::= (ClassName) IDENT:ident {: RESULT=new ClassName(ident); RESULT.setLine(identleft); :};

ErrorProneSuperclass  ::= (NonVoidSuperclass) EXTENDS Type:T1 {: RESULT=new NonVoidSuperclass(T1); RESULT.setLine(T1left); :}
                       |  (VoidSuperclass) {: RESULT=new VoidSuperclass(); :} /* epsilon */
                       |  (ErrorSuperclass) EXTENDS error
                          {:
                             Symbol symbol = (Symbol)(CUP$Parser$stack.elementAt(CUP$Parser$top));
                             parser.syntaxErrorLogger.log(null, symbol.left, null, SyntaxErrorLogger.SyntaxErrorKind.INVALID_CLASS_INHERITANCE);
                             parser.report_error(null, null);
                          :} {: RESULT=new ErrorSuperclass(); :};

FieldDeclList         ::= (NonEmptyFieldDeclList) FieldDeclList:F1 ErrorProneFieldDecl:E2 {: RESULT=new NonEmptyFieldDeclList(F1, E2); RESULT.setLine(F1left); :}
                       |  (EmptyFieldDeclList) {: RESULT=new EmptyFieldDeclList(); :} /* epsilon */;

ErrorProneFieldDecl   ::= (CorrectFieldDecl) Type:T1 FieldList:F2 SEMI {: RESULT=new CorrectFieldDecl(T1, F2); RESULT.setLine(T1left); :}
                       |  (ErrorFieldDecl1) ErrorFieldDecl:E1 SEMI {: RESULT=new ErrorFieldDecl1(E1); RESULT.setLine(E1left); :}
                       |  (ErrorFieldDecl2) error
                          {:
                             Symbol symbol = (Symbol)(CUP$Parser$stack.elementAt(CUP$Parser$top));
                             parser.syntaxErrorLogger.log(null, symbol.left, null, SyntaxErrorLogger.SyntaxErrorKind.INVALID_CLASS_FIELD_DECLARATION);
                             parser.report_error(null, null);
                          :} {: RESULT=new ErrorFieldDecl2(); :};

ErrorFieldDecl        ::= (ErrorFieldDecl) error
                          {:
                             Symbol symbol = (Symbol)(CUP$Parser$stack.elementAt(CUP$Parser$top));
                             parser.syntaxErrorLogger.log(null, symbol.left, null, SyntaxErrorLogger.SyntaxErrorKind.INVALID_CLASS_FIELD_DECLARATION);
                             parser.report_error(null, null);
                          :} {: RESULT=new ErrorFieldDecl(); :};

FieldList             ::= (MultipleFieldFieldList) Field:F1 COMMA FieldList:F2 {: RESULT=new MultipleFieldFieldList(F1, F2); RESULT.setLine(F1left); :}
                       |  (SingleFieldFieldList) Field:F1 {: RESULT=new SingleFieldFieldList(F1); RESULT.setLine(F1left); :};

Field                 ::= (VectorField) IDENT:ident LBRACKET RBRACKET {: RESULT=new VectorField(ident); RESULT.setLine(identleft); :}
                       |  (ScalarField) IDENT:ident {: RESULT=new ScalarField(ident); RESULT.setLine(identleft); :};

Methods               ::= (NonVoidMethods) LBRACE MethodDeclList:M1 RBRACE:R2 {: RESULT=new NonVoidMethods(M1, R2); RESULT.setLine(M1left); :}
                       |  (VoidMethods) {: RESULT=new VoidMethods(); :} /* epsilon */;

MethodDeclList        ::= (NonEmptyMethodDeclList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new NonEmptyMethodDeclList(M1, M2); RESULT.setLine(M1left); :}
                       |  (EmptyMethodDeclList) {: RESULT=new EmptyMethodDeclList(); :} /* epsilon */;
                
MethodDecl            ::= (MethodDecl) ReturnType:R1 MethodName:M2 LPAREN FormPars:F3 RPAREN:R4 LocalVarDeclList:L5 MethodBodyStart:M6 StatementList:S7 MethodEnd:M8 {: RESULT=new MethodDecl(R1, M2, F3, R4, L5, M6, S7, M8); RESULT.setLine(R1left); :};

ReturnType            ::= (NonVoidReturnType) Type:T1 {: RESULT=new NonVoidReturnType(T1); RESULT.setLine(T1left); :}
                       |  (VoidReturnType) VOID {: RESULT=new VoidReturnType(); :};

MethodName            ::= (MethodName) IDENT:ident {: RESULT=new MethodName(ident); RESULT.setLine(identleft); :};

FormPars              ::= (NonVoidFormPars) FormParList:F1 {: RESULT=new NonVoidFormPars(F1); RESULT.setLine(F1left); :}
                       |  (VoidFormPars) {: RESULT=new VoidFormPars(); :} /* epsilon */;

FormParList           ::= (MultipleFormParFormParList) ErrorProneFormPar:E1 COMMA FormParList:F2 {: RESULT=new MultipleFormParFormParList(E1, F2); RESULT.setLine(E1left); :}
                       |  (SingleFormParFormParList) ErrorProneFormPar:E1 {: RESULT=new SingleFormParFormParList(E1); RESULT.setLine(E1left); :};
                          
                
ErrorProneFormPar     ::= (VectorFormPar) Type:T1 IDENT:ident LBRACKET RBRACKET {: RESULT=new VectorFormPar(T1, ident); RESULT.setLine(T1left); :}
                       |  (ScalarFormPar) Type:T1 IDENT:ident {: RESULT=new ScalarFormPar(T1, ident); RESULT.setLine(T1left); :}
                       |  (ErrorFormPar) error
                          {:
                             Symbol symbol = (Symbol)(CUP$Parser$stack.elementAt(CUP$Parser$top));
                             parser.syntaxErrorLogger.log(null, symbol.left, null, SyntaxErrorLogger.SyntaxErrorKind.INVALID_FORMAL_PARAMETER);
                             parser.report_error(null, null);
                          :} {: RESULT=new ErrorFormPar(); :};
                       
LocalVarDeclList      ::= (NonEmptyLocalVarDeclList) LocalVarDeclList:L1 LocalVarDecl:L2 {: RESULT=new NonEmptyLocalVarDeclList(L1, L2); RESULT.setLine(L1left); :}
                       |  (EmptyLocalVarDeclList) {: RESULT=new EmptyLocalVarDeclList(); :} /* epsilon */;

LocalVarDecl          ::= (LocalVarDecl) Type:T1 LocalVarList:L2 SEMI {: RESULT=new LocalVarDecl(T1, L2); RESULT.setLine(T1left); :};

LocalVarList          ::= (MultipleVarLocalVarList) LocalVarList:L1 COMMA LocalVar:L2 {: RESULT=new MultipleVarLocalVarList(L1, L2); RESULT.setLine(L1left); :}
                       |  (SingleVarLocalVarList) LocalVar:L1 {: RESULT=new SingleVarLocalVarList(L1); RESULT.setLine(L1left); :};

LocalVar              ::= (VectorLocalVar) IDENT:ident LBRACKET RBRACKET {: RESULT=new VectorLocalVar(ident); RESULT.setLine(identleft); :}
                       |  (ScalarLocalVar) IDENT:ident {: RESULT=new ScalarLocalVar(ident); RESULT.setLine(identleft); :};

MethodBodyStart       ::= (MethodBodyStart) LBRACE {: RESULT=new MethodBodyStart(); :};

StatementList         ::= (NonEmptyStatementList) StatementList:S1 Statement:S2 {: RESULT=new NonEmptyStatementList(S1, S2); RESULT.setLine(S1left); :}
                       |  (EmptyStatementList) {: RESULT=new EmptyStatementList(); :} /* epsilon */;

Statement             ::= (AssignmentDesignatorStatement) Designator:D1 ASSIGN ErrorProneExpr:E2 SEMI {: RESULT=new AssignmentDesignatorStatement(D1, E2); RESULT.setLine(D1left); :}
                       |  (MethodCallDesignatorStatement) Designator:D1 ActParsStart:A2 ActPars:A3 ActParsEnd:A4 SEMI {: RESULT=new MethodCallDesignatorStatement(D1, A2, A3, A4); RESULT.setLine(D1left); :}
                       |  (IfThenStatement) IF ConditionStart:C1 LPAREN ErrorProneCondition:E2 RPAREN:R3 ConditionEnd:C4 Statement:S5 {: RESULT=new IfThenStatement(C1, E2, R3, C4, S5); RESULT.setLine(C1left); :}
                       |  (IfThenElseStatement) IF ConditionStart:C1 LPAREN ErrorProneCondition:E2 RPAREN:R3 ConditionEnd:C4 Statement:S5 Else:E6 Statement:S7 {: RESULT=new IfThenElseStatement(C1, E2, R3, C4, S5, E6, S7); RESULT.setLine(C1left); :}
                       |  (DoWhileStatement) DoWhileStatementStart:D1 Statement:S2 WHILE ConditionStart:C3 LPAREN Condition:C4 RPAREN:R5 ConditionEnd:C6 SEMI {: RESULT=new DoWhileStatement(D1, S2, C3, C4, R5, C6); RESULT.setLine(D1left); :}
                       |  (BreakStatement) BREAK:dummy SEMI {: RESULT=new BreakStatement(dummy); RESULT.setLine(dummyleft); :}
                       |  (ContinueStatement) CONTINUE:dummy SEMI {: RESULT=new ContinueStatement(dummy); RESULT.setLine(dummyleft); :}
                       |  (ReturnNothingStatement) RETURN:dummy SEMI {: RESULT=new ReturnNothingStatement(dummy); RESULT.setLine(dummyleft); :}
                       |  (ReturnExprStatement) RETURN:dummy Expr:E1 SEMI {: RESULT=new ReturnExprStatement(dummy, E1); RESULT.setLine(dummyleft); :}
                       |  (ReadStatement) READ LPAREN Designator:D1 RPAREN:R2 SEMI {: RESULT=new ReadStatement(D1, R2); RESULT.setLine(D1left); :}
                       |  (PrintExprStatement) PRINT LPAREN Expr:E1 RPAREN:R2 SEMI {: RESULT=new PrintExprStatement(E1, R2); RESULT.setLine(E1left); :}
                       |  (PrintExprIntConstStatement) PRINT LPAREN Expr:E1 COMMA INT:intValue RPAREN:R2 SEMI {: RESULT=new PrintExprIntConstStatement(E1, intValue, R2); RESULT.setLine(E1left); :}
                       |  (DelimitedStatement) LBRACE StatementList:S1 RBRACE:R2 {: RESULT=new DelimitedStatement(S1, R2); RESULT.setLine(S1left); :};                  
                       
Designator            ::= (IdentDesignator) IDENT:ident {: RESULT=new IdentDesignator(ident); RESULT.setLine(identleft); :}

                       |  (MemberAccessDesignator) DesignatorStart:D1 DOT IDENT:ident {: RESULT=new MemberAccessDesignator(D1, ident); RESULT.setLine(D1left); :};
                             
DesignatorStart       ::= (IdentDesignatorStart) IDENT:ident {: RESULT=new IdentDesignatorStart(ident); RESULT.setLine(identleft); :}

                       |  (MemberAccessDesignatorStart) DesignatorStart:D1 DOT IDENT:ident {: RESULT=new MemberAccessDesignatorStart(D1, ident); RESULT.setLine(D1left); :};



Expr                  ::= (TermExpr) Term:T1 {: RESULT=new TermExpr(T1); RESULT.setLine(T1left); :};


Term                  ::= (FactorTerm) Factor:F1 {: RESULT=new FactorTerm(F1); RESULT.setLine(F1left); :};

               
Factor                ::= (DesignatorFactor) Designator:D1 {: RESULT=new DesignatorFactor(D1); RESULT.setLine(D1left); :}
                       |  (MethodCallFactor) Designator:D1 ActParsStart:A2 ActPars:A3 ActParsEnd:A4 {: RESULT=new MethodCallFactor(D1, A2, A3, A4); RESULT.setLine(D1left); :}
                       |  (IntFactor) INT:value {: RESULT=new IntFactor(value); RESULT.setLine(valueleft); :}
                       |  (CharFactor) CHAR:value {: RESULT=new CharFactor(value); RESULT.setLine(valueleft); :}
                       |  (BoolFactor) BOOL:value {: RESULT=new BoolFactor(value); RESULT.setLine(valueleft); :}
                       |  (NewScalarFactor) NEW Type:T1 {: RESULT=new NewScalarFactor(T1); RESULT.setLine(T1left); :}
                       |  (NewVectorFactor) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new NewVectorFactor(T1, E2); RESULT.setLine(T1left); :}
                       |  (DelimitedFactor) LPAREN Expr:E1 RPAREN:R2 {: RESULT=new DelimitedFactor(E1, R2); RESULT.setLine(E1left); :};

ActParsStart          ::= (ActParsStart) LPAREN {: RESULT=new ActParsStart(); :};

ActPars               ::= (NonVoidActPars) ExprList:E1 {: RESULT=new NonVoidActPars(E1); RESULT.setLine(E1left); :}
                       |  (VoidActPars) {: RESULT=new VoidActPars(); :} /* epsilon */;

ExprList              ::= (MultipleExprExprList) Expr:E1 COMMA ExprList:E2 {: RESULT=new MultipleExprExprList(E1, E2); RESULT.setLine(E1left); :}
                       |  (SingleExprExprList) Expr:E1 {: RESULT=new SingleExprExprList(E1); RESULT.setLine(E1left); :};

ActParsEnd            ::= (ActParsEnd) RPAREN:dummy {: RESULT=new ActParsEnd(dummy); RESULT.setLine(dummyleft); :};



ErrorProneExpr        ::= (CorrectExpr) Expr:E1 {: RESULT=new CorrectExpr(E1); RESULT.setLine(E1left); :}
                       |  (ErrorExpr) error
                          {:
                             Symbol symbol = (Symbol)(CUP$Parser$stack.elementAt(CUP$Parser$top));
                             parser.syntaxErrorLogger.log(null, symbol.left, null, SyntaxErrorLogger.SyntaxErrorKind.INVALID_ASSIGNMENT);
                             parser.report_error(null, null);
                          :} {: RESULT=new ErrorExpr(); :};

ConditionStart        ::= (ConditionStart) {: RESULT=new ConditionStart(); :} /* epsilon */;

Condition             ::=  (BoolCond) BOOL:value {: RESULT=new BoolCond(value); RESULT.setLine(valueleft); :};
                          
ErrorProneCondition   ::= (CorrectCondition) Condition:C1 {: RESULT=new CorrectCondition(C1); RESULT.setLine(C1left); :}
                       |  (ErrorCondition) error
                          {:
                             Symbol symbol = (Symbol)(CUP$Parser$stack.elementAt(CUP$Parser$top));
                             parser.syntaxErrorLogger.log(null, symbol.left, null, SyntaxErrorLogger.SyntaxErrorKind.INVALID_IF_STATEMENT_CONDITION);
                             parser.report_error(null, null);
                          :} {: RESULT=new ErrorCondition(); :};

CondFactor            ::= (ExprCondFactor) Expr:E1 {: RESULT=new ExprCondFactor(E1); RESULT.setLine(E1left); :};

ConditionEnd          ::= (ConditionEnd) {: RESULT=new ConditionEnd(); :} /* epsilon */;

Else                  ::= (Else) ELSE {: RESULT=new Else(); :};
                     
DoWhileStatementStart ::= (DoWhileStatementStart) DO {: RESULT=new DoWhileStatementStart(); :};

MethodEnd             ::= (MethodEnd) RBRACE:R1 {: RESULT=new MethodEnd(R1); RESULT.setLine(R1left); :};

Constructor           ::= (Constructor) THIS FormPars:F1 LBRACE StatementList:S2 RBRACE:R3 {: RESULT=new Constructor(F1, S2, R3); RESULT.setLine(F1left); :};

ProgramEnd            ::= (ProgramEnd) RBRACE:dummy {: RESULT=new ProgramEnd(dummy); RESULT.setLine(dummyleft); :};